# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Easy Minecraft Server Gui.sln                   # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Easy Minecraft Server Gui\Easy Minecraft Server Gui.csproj  # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Output_Directory: ./output                                    # Define the output directory for the build artifacts.

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the solution
    - name: Build the application
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:OutputPath=$env:Output_Directory
      env:
        Configuration: ${{ matrix.configuration }}

    # Copy additional files to the output directory
    - name: Copy additional files
      run: |
        Copy-Item -Path "src\connect.bat" -Destination "$env:Output_Directory"
        Copy-Item -Path "src\help1.png" -Destination "$env:Output_Directory"
        Copy-Item -Path "src\help2.png" -Destination "$env:Output_Directory"
        Copy-Item -Path "src\help3.png" -Destination "$env:Output_Directory"
        Copy-Item -Path "src\serverOpen.bat" -Destination "$env:Output_Directory"

    # Upload the build artifacts
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Build Artifacts
        path: ${{ env.Output_Directory }}/*
